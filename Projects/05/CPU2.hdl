CHIP CPU{
    IN instruction[16], 
       inM[16],
       reset;

    OUT outM[16],
        writeM,
        addressM[15],
        PC[15];

    PARTS:
        //指令类型判断
        Not(in = instruction[15], out = isAInstruction);

        //A寄存器
        Mux16(a = aluOut, b = instruction, sel = isAInstruction, out = aIn);
        Register(in = aluOut, load = loadA, out = aReg, out[0..14] = addressM);

        // D寄存器
        Register(in = aluOut, load = loadD, out = dReg);

        // 判断 ALU Y端口的输入源
        Mux16(a = aReg, b = inM, sel = instruction[13], out = aluY);
        
        //ALU执行计算
        ALU(x = dReg, y = aluY,
            zx = instruction[11], nx = instruction[10],
            zy = instruction[9], ny = instruction[8],
            f = instruction[7], no =instruction[6],
            out = aluOut, out = outM, zr = zr, ng = ng ); 

        //控制信号
        And(a = instruction[15], b = instruction[5], out = loadA);
        And(a = instruction[15], b = instruction[4], out = loadD);
        And(a = instruction[15], b = instruction[3], out = writeM);

        //PC计数器
        PC(in = aReg, load = shouldJump, inc = true, reset = reset, out = pc);
        
        //跳转逻辑判断

        //是否为跳转指令
        Or(a = instruction[0], b = instruction[1], out = isJump0);
        Or(a = isJump0, b = instruction[3], out =isJump);
        
        //是否满足跳转条件
        And(a = ng, b = instruction[2], out = t1);  // < 0
        And(a = zr, b = instruction[1], out = t2);  // = 0
        Or(a = ng, b = zr, out = ngz);  
        Not(in = ngz, out = pos);   
        And(a = pos, b = instruction[0], out = t3);  // > 0
        Or(a = t1, b = t2, out = tt1);             
        Or(a = tt1, b = t3, out = jumpCondition);
                  

        And(a = isJump, b = jumpCondition, out = shouldJump);

}